# USAGE: sudo ansible-playbook --ask-become-pass --check -i "localhost," -c local playbook_ubuntu_pure.yml --extra-vars="bossjones__oh__my__zsh__user=$(whoami) bossjones__oh__my__zsh__theme=powerlevel"
# USAGE: sudo ansible-playbook --ask-become-pass --check -i "localhost," -c local playbook_ubuntu_pure.yml --extra-vars="bossjones__oh__my__zsh__user=$(whoami) bossjones__oh__my__zsh__theme=pure"
---

# # rbenv
# git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
# echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.zshrc
# echo 'eval "$(rbenv init -)"' >> ~/.zshrc
# git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build

# # ruby
# sudo apt-get install -y build-essential bison ruby-dev rake zlib1g-dev \
#     libyaml-dev libssl-dev libreadline-dev libncurses5-dev llvm llvm-dev \
#     libeditline-dev libedit-dev
# rbenv install 2.2.3

- hosts: localhost
  become: yes
  become_method: sudo
  vars:
    bossjones__oh__my__zsh__theme: "pure"
    NODE_VERSION_TO_INSTALL: 16.13.1
    rbenv:
      env: personal
      version: v1.1.2
      default_ruby: 2.7.2
      rubies:
        - version: 2.7.2

    rbenv_clean_up: false

    rbenv_repo: "https://github.com/rbenv/rbenv.git"

    rbenv_plugins:
      - { name: "rbenv-vars",         repo: "https://github.com/rbenv/rbenv-vars.git",         version: "master" }
      - { name: "ruby-build",         repo: "https://github.com/rbenv/ruby-build.git",         version: "master" }
      - { name: "rbenv-default-gems", repo: "https://github.com/rbenv/rbenv-default-gems.git", version: "master" }
      - { name: "rbenv-installer",    repo: "https://github.com/rbenv/rbenv-installer.git",    version: "master" }
      - { name: "rbenv-update",       repo: "https://github.com/rkh/rbenv-update.git",         version: "master" }
      - { name: "rbenv-whatis",       repo: "https://github.com/rkh/rbenv-whatis.git",         version: "master" }
      - { name: "rbenv-use",          repo: "https://github.com/rkh/rbenv-use.git",            version: "master" }

    rbenv_root: "{% if rbenv.env == 'system' %}/usr/local/rbenv{% else %}~/.rbenv{% endif %}"

    rbenv_set_vars: true

    rbenv_users: []

    rbenv_extra_depends:
    - libssl1.0-dev
    - build-essential
    - bison
    - ruby-dev
    - rake
    - zlib1g-dev
    - libyaml-dev
    - libssl-dev
    - libreadline-dev
    - libncurses5-dev
    - llvm
    - llvm-dev
    - libeditline-dev
    - libedit-dev
    rbenv_apt_packages:
    - build-essential
    - curl
    - git
    - libcurl4-openssl-dev
    - libffi-dev
    - libreadline-dev
    - libssl-dev
    - libxml2-dev
    - libxslt1-dev
    - zlib1g-dev
    rbenv_dnf_packages:
    - curl
    - gcc
    - openssl-devel
    - libyaml-devel
    - readline-devel
    - zlib-devel
    - libffi-devel
    - git
    rbenv_yum_packages:
    - bzip2
    - curl
    - gcc
    - git
    - libffi-devel
    - libyaml-devel
    - openssl-devel
    - readline-devel
    - zlib-devel
    rbenv_user_profile: true
    bossjones__oh__my__zsh__enable_zlogin: "yes"
    bossjones__oh__my__zsh__enable_zlogout: "yes"
    bossjones__oh__my__zsh__enable_zprofile: "no"
    bossjones__oh__my__zsh__enable_zshenv: "yes"
    bossjones__oh__my__zsh__install_fzf: "yes"
    bossjones__oh__my__zsh__change_default_shell: yes
    bossjones__oh__my__zsh__path_to_shell: /usr/bin/zsh
    bossjones__oh__my__zsh__antigen_bundles_extras:
      - zdharma-continuum/fast-syntax-highlighting
      # Solarized dircolors plugin for zsh
      - joel-porquet/zsh-dircolors-solarized

      # peco/percol/fzf wrapper plugin for zsh
      - mollifier/anyframe

      #  A utility tool powered by fzf for using git interactively.
      - wfxr/forgit

      - { name: eventi/noreallyjustfuckingstopalready, command: killall }
      # https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins
      - { name: vscode, command: code }
      - { name: gpg-agent, command: gpg-agent }
      - history
      - { name: fd, command: fd }
      - { name: autopep8, command: autopep8 }
      - { name: pylint, command: pylint }
      - { name: ELLIOTTCABLE/rbenv.plugin.zsh, command: ruby }
      - { name: colored-man-pages, command: man }

      - { name: bossjones/boss-git-zsh-plugin, command: git }
      - { name: bossjones/boss-docker-zsh-plugin, command: docker }

      # A zsh plugin to sync git repositories and clean them up.
      - caarlos0/zsh-git-sync

      # This ZSH plugin enhances the terminal environment with 256 colors. It looks at the chosen TERM environment variable and sees if there is respective (n-)curses' termcap/terminfo descriptors for 256 colors available. The result is a multicolor terminal, if available.
      - chrissicool/zsh-256color

      # Desktop notifications for long-running commands in zsh.
      - marzocchi/zsh-notify
      # Add zsh's missing hooks, and support for user-defined hooks
      - willghatch/zsh-hooks

      # A collection of git utilities and useful extra git scripts I've discovered or written, packaged for ease of use with shell frameworks.
      - unixorn/git-extra-commands

      # alias for docker aliases
      - { name: hadenlabs/zsh-docker@main, command: docker }
      # servers functions for shell
      - luismayta/zsh-servers-functions
      # Search ssh connect with peco
      - { name: luismayta/zsh-peco-ssh-connect, command: peco }

      # Plugin for lazy-loading pyenv in zsh.
      - { name: erikced/zsh-pyenv-lazy-load, command: pyenv }

      # Convert seconds to a human readable string: 165392 â†’ 1d 21h 56m 32s
      - sindresorhus/pretty-time-zsh@main

      # Because your terminal should be able to perform tasks asynchronously without external tools!
      - mafredri/zsh-async

      - asdf
      # Pretty, minimal and fast ZSH prompt
      - sindresorhus/pure@main

    bossjones__oh__my__zsh__autosuggestions_bind_key: "^U"
    bossjones__oh__my__zsh__path:
      - "{{rbenv_root}}/shims"
      - $HOME/bin
      - $HOME/.local/bin
      - $HOME/.pyenv/bin
      - ~/.pyenv/bin
      - $HOME/.rbenv/bin
      - $HOME/.fnm
      - /usr/local/sbin
      - /usr/local/bin
      - /usr/sbin
      - /usr/bin
      - /sbin
      - /bin
      - /usr/games
      - /usr/local/games

    # SOURCE: https://github.com/sorin-ionescu/prezto/blob/4f19700919c8ebbaf75755fc0d03716d13183f49/runcoms/zshenv
    # #
    # # Defines environment variables.
    # #
    # # Authors:
    # #   Sorin Ionescu <sorin.ionescu@gmail.com>
    # #

    # # Ensure that a non-login, non-interactive shell has a defined environment.
    # if [[ "$SHLVL" -eq 1 && ! -o LOGIN && -s "${ZDOTDIR:-$HOME}/.zprofile" ]]; then
    #   source "${ZDOTDIR:-$HOME}/.zprofile"
    # fi

    bossjones__oh__my__zsh__zshenv: |-
      # Since .zshenv is always sourced, it often contains exported variables that should be available to other programs. For example, $PATH, $EDITOR, and $PAGER are often set in .zshenv. Also, you can set $ZDOTDIR in .zshenv to specify an alternative location for the rest of your zsh configuration.
      # ~/.zshenv: system-wide .zshenv file for zsh(1).
      #
      # This file is sourced on all invocations of the shell.
      # If the -f flag is present or if the NO_RCS option is
      # set within this file, all other initialization files
      # are skipped.
      #
      # This file should contain commands to set the command
      # search path, plus other important environment variables.
      # This file should not contain commands that produce
      # output or assume the shell is attached to a tty.
      #
      # Global Order: zshenv, zprofile, zshrc, zlogin

      export RBENV_ROOT={{rbenv_root}}
      export GOENV_ROOT=$HOME/.goenv

      if [[ -z "$PATH" || "$PATH" == "/bin:/usr/bin" ]]
      then
        export PATH="/usr/local/bin:/usr/bin:/bin:/usr/games"
        export PATH="{{rbenv_root}}/shims:$HOME/bin:$HOME/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:$PATH"
        export PATH="${GOENV_ROOT}/bin:${PATH}"
      fi
      skip_global_compinit=1

    # /usr/local/rbenv/shims:/home/vagrant/bin:/home/vagrant/.local/bin:/home/vagrant/.pyenv/bin:/home/vagrant/.rbenv/bin:/home/vagrant/.fnm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games

    bossjones__oh__my__zsh__zlogin: |-
      # https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout
      #
      # Executes commands at login post-zshrc.
      #
      # Authors:
      #   Sorin Ionescu <sorin.ionescu@gmail.com>
      #
      # /etc/zsh/zlogin: system-wide .zlogin file for zsh(1).
      #
      # This file is sourced only for login shells. It
      # should contain commands that should be executed only
      # in login shells. It should be used to set the terminal
      # type and run a series of external commands (fortune,
      # msgs, from, etc.)
      #
      # Global Order: zshenv, zprofile, zshrc, zlogin

      source ~/.zshrc


    bossjones__oh__my__zsh__before_scripts:
      - name: fnm.zsh
        content: |-
          export PATH=~/.fnm:$PATH
          # SOURCE: https://github.com/Schniz/fnm
          if [ -n "$(which fnm)" ]; then
              eval "$(fnm env)"
              if [ "$(fnm ls | grep -i {{NODE_VERSION_TO_INSTALL}} | wc -l)" = "0" ]; then
                fnm install {{NODE_VERSION_TO_INSTALL}}
                fnm use {{NODE_VERSION_TO_INSTALL}}
                fnm default {{NODE_VERSION_TO_INSTALL}}
                fnm current
              fi
          fi
      - name: asdf.zsh
        content: |-
          if [ -d "$HOME/.asdf" ]; then
            . $HOME/.asdf/asdf.sh
          fi

      - name: kubeconfig.zsh
        content: |-
          if [ -d "/srv/ansible-role-oh-my-zsh" ]; then
            export KUBECONFIG=$KUBECONFIG:/srv/ansible-role-oh-my-zsh/kube-config
          fi

          enable_kubectl_completion() {
            if [ -n "$(which kubectl)" ]; then
              source <(kubectl completion zsh)
            fi
          }

      - name: rust.zsh
        content: |-
          if [ -d "$HOME/.cargo/bin" ]; then
            export PATH=$HOME/.cargo/bin:$PATH
          fi
      - name: go.zsh
        content: |-
          if [ -d "/usr/local/go/bin" ]; then
            export PATH=/usr/local/go/bin:$PATH
          fi
          export PATH=$GOPATH/bin:$PATH
          alias cdgo='CDPATH=.:$GOPATH/src/github.com:$GOPATH/src/golang.org:$GOPATH/src'

          if [ -d ~/.goenv ]; then
            export GOENV_ROOT="$HOME/.goenv"
            export PATH="$GOENV_ROOT/bin:$PATH"
            eval "$(goenv init -)"
            export PATH="$GOROOT/bin:$PATH"
            export PATH="$PATH:$GOPATH/bin"
          fi

      - name: workon.zsh
        content: |-
          export WORKON_HOME="$HOME/.pyenv/versions"
          export PROJECT_HOME=$HOME/dev

      - name: fzf.zsh
        content: |-
          [ -f ~/.fzf.zsh ] && . ~/.fzf.zsh

      - name: pure.zsh
        content: |-
          if [ -d "$HOME/.zsh/pure" ]; then
            fpath+=$HOME/.zsh/pure
          fi

      - name: poetry.zsh
        content: |-
          if [ -d "$HOME/.asdf/installs/poetry/1.0.10/env" ]; then
            . $HOME/.asdf/installs/poetry/1.0.10/env
          fi

    bossjones__oh__my__zsh__after_scripts:
      - name: fnm.zsh
        content: |-
          # SOURCE: https://github.com/Schniz/fnm
          if [ -n "$(which fnm)" ]; then
              eval "$(fnm env --use-on-cd)"
              if [ "$(fnm ls | grep -i {{NODE_VERSION_TO_INSTALL}} | wc -l)" = "0" ]; then
                fnm install {{NODE_VERSION_TO_INSTALL}} || true
                fnm use {{NODE_VERSION_TO_INSTALL}} || true
                fnm default {{NODE_VERSION_TO_INSTALL}} || true
                fnm current || true
                npm install -g pure-prompt || true
                npm install -g pretty-time-zsh || true
              fi
          fi

      - name: gnubin.zsh
        content: |-
          alias ls="ls --color=always"

      - name: fzf.zsh
        content: |
          [ -f ~/.fzf.zsh ] && . ~/.fzf.zsh

      - name: glob.zsh
        content: |
          # see `man zshoptions`
          setopt EXTENDED_GLOB

      - name: history.zsh
        content: |
          # # see `man zshoptions`
          # # SOURCE: https://linux.die.net/man/1/zshoptions
          # # SOURCE: http://zsh.sourceforge.net/Doc/Release/Options.html
          # # Save each command's beginning timestamp (in seconds since the epoch) and the duration (in seconds) to the history file. The format of this prefixed data is:
          # # ':<beginning time>:<elapsed seconds>:<command>'.
          # setopt EXTENDED_HISTORY

          # # If a new command line being added to the history list duplicates an older one, the older command is removed from the list (even if it is not the previous event).
          # setopt HIST_IGNORE_ALL_DUPS

          # # APPEND_HISTORY <D>
          # # If this is set, zsh sessions will append their history list to the history file, rather than replace it. Thus, multiple parallel zsh sessions will all have the new entries from their history lists added to the history file, in the order that they exit. The file will still be periodically re-written to trim it when the number of lines grows 20% beyond the value specified by $SAVEHIST (see also the HIST_SAVE_BY_COPY option).
          # # --------------------------------------------------
          # # This options works like APPEND_HISTORY except that new history lines are added to the $HISTFILE incrementally (as soon as they are entered), rather than waiting until the shell exits. The file will still be periodically re-written to trim it when the number of lines grows 20% beyond the value specified by $SAVEHIST (see also the HIST_SAVE_BY_COPY option).
          # setopt INC_APPEND_HISTORY

          # setopt INC_APPEND_HISTORY_TIME
          # setopt SHARE_HISTORY

          # SOURCE: https://github.com/balakrishnanc/dotfiles/blob/bff74304808b68ffbc571b2d13d3b8077ce65c4e/zsh/zshenv.template
          # Remove superfluous blanks from each command line being added
          #  to the history list.
          setopt HIST_REDUCE_BLANKS

          # When writing out the history file, older commands that duplicate newer ones
          #  are omitted.
          setopt HIST_SAVE_NO_DUPS

          # If you find that you want more control over when commands get imported,
          #  you may wish to turn SHARE_HISTORY off,
          #  INC_APPEND_HISTORY or INC_APPEND_HISTORY_TIME on, and then manually import
          #  commands whenever you need them using 'fc -RI'.
          unsetopt SHARE_HISTORY

          # This option is a variant of INC_APPEND_HISTORY in which, where possible,
          #  the history entry is written out to the file after the command is finished,
          #  so that the time taken by the command is recorded correctly in the
          #  history file in EXTENDED_HISTORY format. This means that the history entry
          #  will not be available immediately from other instances of the shell that are
          #  using the same history file.
          # This option is only useful if INC_APPEND_HISTORY and SHARE_HISTORY are
          #  turned off. The three options should be considered mutually exclusive.
          setopt INC_APPEND_HISTORY_TIME

          # This options works like APPEND_HISTORY except that new history lines are
          #  added to the $HISTFILE incrementally (as soon as they are entered),
          #  rather than waiting until the shell exits.
          unsetopt INC_APPEND_HISTORY

      - name: rbenv.zsh
        content: |
          if [ -e {{rbenv_root}} ]; then
            export PATH="{{rbenv_root}}/shims:$PATH"
          fi
          if [[ -x $(which -p rbenv) ]]; then
            eval "$(rbenv init -)"
          fi

      - name: path.zsh
        content: |
          if [ -d "$HOME/bin" ]; then
            export PATH=$HOME/bin:$PATH
          fi
      # - name: cheat.zsh
      #   content: |
      #     if [ -d "$HOME/bin" ]; then
      #       export PATH=$HOME/bin:$PATH
      #     fi

      - name: pyenv.zsh
        content: |
          if [ -e ~/.pyenv ]; then
            export PYENV_ROOT=~/.pyenv
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init -)"
            pyenv virtualenvwrapper_lazy
          fi

      - name: updatedb.zsh
        content: |
          # updatedb () {

          #     sudo /usr/libexec/locate.updatedb

          # }


      - name: unixorn.zsh
        content: |
          # SOURCE: https://github.com/unixorn/zsh-quickstart-kit/blob/master/zsh/.zsh_aliases
          # aliases borrowed from unixorn
          alias historysummary="history | awk '{a[\$2]++} END{for(i in a){printf \"%5d\t%s\n\",a[i],i}}' | sort -rn | head"

          # A couple of different external IP lookups depending on which is down.
          alias external_ip="curl -s icanhazip.com"
          alias myip="dig +short myip.opendns.com @resolver1.opendns.com"

          # Show laptop's IP addresses
          alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"

          # SSH stuff
          # Pass our credentials by default
          alias sshA='ssh -A'
          alias ssh-A='ssh -A'
          alias ssh-unkeyed='/usr/bin/ssh'
          alias ssh_unkeyed='/usr/bin/ssh'

          alias scp-no-hostchecks='scp -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          alias ssh-no-hostchecks='ssh -A -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          alias scp_no_hostchecks='scp -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          alias ssh_no_hostchecks='ssh -A -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'

          # Set up even more shortcuts because I am that lazy a typist.
          alias nh-scp=scp-no-hostchecks
          alias nh-ssh=ssh-no-hostchecks
          alias nh_scp=scp-no-hostchecks
          alias nh_ssh=ssh-no-hostchecks
          alias nhscp=scp-no-hostchecks
          alias nhssh=ssh-no-hostchecks

          # Strip color codes from commands that insist on spewing them so we can
          # pipe them into files cleanly.
          alias stripcolors='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'

          # lists zombie processes
          zombie() {
            ps aux | awk '{if ($8=="Z") { print $2 }}'
          }
          alias zombies=zombie

    bossjones__oh__my__zsh__zshrc_local: |-
      export SHELL="{{bossjones__oh__my__zsh__path_to_shell}}"
      export RBENV_ROOT={{rbenv_root}}
      export RBENV_VERSION={{rbenv.default_ruby}}
      export VIRTUAL_ENV_DISABLE_PROMPT=1
      export ZSH_PYENV_LAZY_VIRTUALENV=1
      # Larger bash history (allow 32Â³ entries; default is 500)

      # set some history options
      setopt append_history
      setopt extended_history
      setopt hist_expire_dups_first
      setopt hist_ignore_all_dups
      setopt hist_ignore_dups
      setopt hist_ignore_space
      setopt hist_reduce_blanks
      setopt hist_save_no_dups
      setopt hist_verify
      setopt INC_APPEND_HISTORY
      unsetopt HIST_BEEP

      # Share your history across all your terminal windows
      setopt share_history
      #setopt noclobber

      # Larger bash history (allow 32Â³ entries; default is 500)

      HISTSIZE=100000
      SAVEHIST=100000
      HISTFILE="$HOME/.zsh_history"
      # export HISTCONTROL=ignoredups

      # # Prefer US English and use UTF-8
      # export LANG=en_US.UTF-8
      # export LC_ALL=en_US.UTF-8

      # # SOURCE: https://github.com/luismayta/dotfiles/blob/597ddc09e1bfccc43076ca21cb679299b83912e4/conf/shell/zshrc
      # # don't put duplicate lines in the history. See bash(1) for more options
      # # ... or force ignoredups and ignorespace
      # HISTCONTROL=ignoredups:ignorespace

      # # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
      # HISTSIZE=100000
      # HISTFILESIZE=2000

      alias reload!='exec "$SHELL" -l'

      fixprompt() {
        antigen reset; reload!
      }

      # setopt HIST_FIND_NO_DUPS

      # Add some completions settings
      setopt ALWAYS_TO_END     # Move cursor to the end of a completed word.
      setopt AUTO_LIST         # Automatically list choices on ambiguous completion.
      setopt AUTO_MENU         # Show completion menu on a successive tab press.
      setopt AUTO_PARAM_SLASH  # If completed parameter is a directory, add a trailing slash.
      setopt COMPLETE_IN_WORD  # Complete from both ends of a word.
      unsetopt MENU_COMPLETE   # Do not autoselect the first completion entry.

      # Long running processes should return time after they complete. Specified
      # in seconds.
      REPORTTIME=2
      TIMEFMT="%U user %S system %P cpu %*Es total"

      # # Speed up autocomplete, force prefix mapping
      # zstyle ':completion:*' accept-exact '*(N)'
      # zstyle ':completion:*' use-cache on
      # zstyle ':completion:*' cache-path ~/.zsh/cache
      # zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)*==34=34}:${(s.:.)LS_COLORS}")';


      if [ -n "$(which direnv)" ]; then
          eval "$(direnv hook zsh)"
      fi

      [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

      if [ -n "$(which kubectl)" ]; then
        source <(kubectl completion zsh); echo "kubectl autocomplete loaded"
      fi


      # remove dupes from $PATH using a zsh builtin
      # https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
      typeset -aU path;

      # # Load iTerm shell integrations if found.
      # test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

      # Expand aliases inline - see http://blog.patshead.com/2012/11/automatically-expaning-zsh-global-aliases---simplified.html
      globalias() {
         if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then
           zle _expand_alias
           zle expand-word
         fi
         zle self-insert
      }

      zle -N globalias

      bindkey " " globalias
      bindkey "^ " magic-space           # control-space to bypass completion
      bindkey -M isearch " " magic-space # normal space during searches


  roles:
    - ../ansible-role-oh-my-zsh

  # tasks:

  #   # SOURCE: https://github.com/veggiemonk/ansible-dotfiles/blob/master/tasks/fonts.yml
  #   - name: Cloning fonts
  #     git:
  #       repo=https://github.com/powerline/fonts
  #       dest="/home/vagrant/powerlinefonts"
  #       accept_hostkey=yes
  #     register: fontCloned
  #     become: yes
  #     become_user: vagrant

  #   - name: Install Fonts
  #     shell: /home/vagrant/powerlinefonts/install.sh chdir=/home/vagrant/powerlinefonts
  #     when: fontCloned is success
  #     become: yes
  #     become_user: vagrant

  pre_tasks:

    - name: ensure directories exist
      file:
        dest: "~/{{ item }}"
        state: directory
        mode: 0700
      loop:
        - .bin
        - bin
        - .local/bin
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"


    - name: 'Cloning goenv | based on https://github.com/syndbg/goenv/blob/master/INSTALL.md'
      git:
        repo=https://github.com/syndbg/goenv
        dest="~/.goenv"
        accept_hostkey=yes
      register: goenvCloned
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      # when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    # # SOURCE: https://github.com/veggiemonk/ansible-dotfiles/blob/master/tasks/fonts.yml
    # - name: 'Cloning fonts | based on https://gist.github.com/ganapativs/e571d9287cb74121d41bfe75a0c864d7'
    #   git:
    #     repo=https://github.com/powerline/fonts
    #     dest="~/powerlinefonts"
    #     accept_hostkey=yes
    #     depth=1
    #   register: fontCloned
    #   become: yes
    #   become_user: "{{ bossjones__oh__my__zsh__user }}"
    #   when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    # - name: 'Cloning iterm2-snazzy theme, dont forget to double click ~/iterm2-snazzy/Snazzy.itermcolors'
    #   git:
    #     repo=https://github.com/sindresorhus/iterm2-snazzy
    #     dest="~/iterm2-snazzy"
    #     accept_hostkey=yes
    #   become: yes
    #   become_user: "{{ bossjones__oh__my__zsh__user }}"
    #   when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    # - name: Install Fonts
    #   shell: ~/powerlinefonts/install.sh chdir=~/powerlinefonts
    #   # when: fontCloned is success
    #   become: yes
    #   become_user: "{{ bossjones__oh__my__zsh__user }}"
    #   when: (fontCloned is success) and not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    # - name: 'brew tap homebrew/cask-fonts'
    #   homebrew_tap:
    #     name: homebrew/cask-fonts
    #     state: present
    #   # brew don't work from root user on macOS
    #   become: yes
    #   become_user: "{{ bossjones__oh__my__zsh__user }}"
    #   when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    # - name: Install font-fira-code
    #   homebrew_cask:
    #     name: "{{ item }}"
    #     state: present
    #   with_items:
    #     - font-fira-code
    #   # brew don't work from root user on macOS
    #   become: yes
    #   become_user: "{{ bossjones__oh__my__zsh__user }}"
    #   when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    - name: Install/Setup asdf and direnv
      package:
        name: '{{ item }}'
        state: latest
      with_items:
        - zsh
        # - asdf
        # - peco
        # - coreutils
        # - findutils
        # - gnu-tar
        # - gnu-sed
        # - gawk
        # - gnutls
        # - gnu-indent
        # - gnu-getopt
        # - grep
        # - reattach-to-user-namespace
        # - fpp
        # - urlview
        - xsel
        - direnv
      become: yes
      # become_user: "{{ bossjones__oh__my__zsh__user }}"
      # when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    # git clone https://github.com/pyenv/pyenv-virtualenvwrapper.git $(pyenv root)/plugins/pyenv-virtualenvwrapper
    - name: Clone fzpyenv-virtualenvwrapper
      git:
        repo: https://github.com/pyenv/pyenv-virtualenvwrapper.git
        dest: "~/.pyenv/plugins/pyenv-virtualenvwrapper"
        version: "master"
        force: yes
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      register: bossjones__oh__my__zsh__register_pyenv_virtualenvwrapper

    # - name: Clone fzf
    #   git:
    #     repo: https://github.com/junegunn/fzf.git
    #     dest: "~/.fzf"
    #     version: "0.22.0"
    #     force: yes
    #   become: yes
    #   become_user: "{{ bossjones__oh__my__zsh__user }}"
    #   register: bossjones__oh__my__zsh__register_fzf

    - name: Install fzf
      shell: |
        git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf || true
        ~/.fzf/install --all
      # args:
      #   chdir: "~/.fzf"
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"

    - name: fzf-drafts | download
      shell: |
        curl -L 'https://raw.githubusercontent.com/jan-warchol/dotfiles/master/bin/fzf-drafts' > ~/bin/fzf-drafts;
        chmod +x ~/bin/fzf-drafts;
      args:
        executable: /bin/bash
      changed_when: false
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"

    - name: 'compaudit | figure out if anything to fix'
      shell: |
        autoload -U compaudit compinit
        compaudit | wc -l
      args:
        executable: /usr/bin/zsh
      register: compaudit_word_count
      changed_when: false
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"

    - name: 'compaudit | fix'
      shell: |
          autoload -U compaudit compinit
          compaudit | xargs chmod g-w,o-w
          compaudit | xargs chown "{{ bossjones__oh__my__zsh__user }}"
          rm ~/.zcompdump*
      args:
        executable: /usr/bin/zsh
      changed_when: false
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      when: compaudit_word_count.stdout != "0"

    - name: 'ensure directories are owned correctly for zsh completion to work'
      shell: |
          chown {{ bossjones__oh__my__zsh__user }}:{{ bossjones__oh__my__zsh__group }} -Rv {{ item }}
      args:
        executable: /usr/bin/zsh
      loop:
        - '/usr/local/share/zsh/site-functions'
        - '/usr/local/share/zsh'
      become: yes
      become_user: "root"
      changed_when: false

    # - name: 'ensure directories are owned correctly for zsh completion to work'
    #   file:
    #     dest: "{{ item }}"
    #     state: directory
    #     owner: "{{ bossjones__oh__my__zsh__user }}"
    #     group: "{{ bossjones__oh__my__zsh__group }}"
    #     recurse: yes
    #   loop:
    #     - '/usr/local/share/zsh/site-functions'
    #     - '/usr/local/share/zsh'
    #   become: yes
    #   become_user: "root"
    #   # when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')


    # # SOURCE: https://github.com/veggiemonk/ansible-dotfiles/blob/master/tasks/fonts.yml
    # - name: Cloning fonts
    #   git:
    #     repo=https://github.com/powerline/fonts
    #     dest="/home/vagrant/powerlinefonts"
    #     accept_hostkey=yes
    #   register: fontCloned
    #   become: yes
    #   become_user: vagrant

    # - name: Install Fonts
    #   shell: /home/vagrant/powerlinefonts/install.sh chdir=/home/vagrant/powerlinefonts
    #   when: fontCloned is success
    #   become: yes
    #   become_user: vagrant

    # - name: bossjones debug-tools install
    #   shell: |
    #     git clone https://github.com/bossjones/debug-tools /usr/local/src/debug-tools || true
    #     sudo chown {{ bossjones__oh__my__zsh__user }}:{{ bossjones__oh__my__zsh__user }} -Rv ~{{ bossjones__oh__my__zsh__user }} || true
    #     /usr/local/src/debug-tools/update-bossjones-debug-tools
    #     sudo chown {{ bossjones__oh__my__zsh__user }}:{{ bossjones__oh__my__zsh__user }} -Rv ~{{ bossjones__oh__my__zsh__user }} || true
    #   args:
    #     executable: /bin/bash
    #   changed_when: false
    #   become: yes
    #   become_user: "{{ bossjones__oh__my__zsh__user }}"


    # - name: "create /usr/local/bin/install-config"
    #   copy:
    #     content: |
    #       export PYENV_VERSIONS_TO_INSTALL="3.9.0\n3.9.8\n"
    #       export PYENV_ROOT=~/.pyenv
    #       export PATH="${PYENV_ROOT}/bin:${PYENV_ROOT}/shims:$PATH"
    #       export RBENV_ROOT=~/.rbenv
    #       export RBENV_VERSION=2.7.2
    #       export NODE_VERSION_TO_INSTALL=16.13.1
    #       export PATH="$HOME/.fnm:${RBENV_ROOT}/shims:${RBENV_ROOT}/bin:$PATH"
    #     dest: "/usr/local/bin/install-config"
    #     owner: "{{ bossjones__oh__my__zsh__user }}"
    #     group: "{{ bossjones__oh__my__zsh__group }}"
    #     mode: 0755

    # - name: fnm | download
    #   shell: |
    #     export NODE_VERSION_TO_INSTALL=16.13.1
    #     install-fnm.sh
    #     export PATH=~/.fnm:$PATH
    #     eval "`fnm env --use-on-cd`"
    #     if [ "$(fnm ls | grep -i {{NODE_VERSION_TO_INSTALL}} | wc -l)" = "0" ]; then
    #       fnm install {{NODE_VERSION_TO_INSTALL}} || true
    #       fnm use {{NODE_VERSION_TO_INSTALL}} || true
    #       fnm default {{NODE_VERSION_TO_INSTALL}} || true
    #       fnm current || true
    #       npm install -g pure-prompt || true
    #       npm install -g pretty-time-zsh || true
    #     fi
    #   args:
    #     executable: /bin/bash
    #   changed_when: false
    #   become: yes
    #   become_user: "{{ bossjones__oh__my__zsh__user }}"

    # SOURCE: https://github.com/k3s-io/k3s-ansible/blob/master/roles/prereq/tasks/main.yml
    - name: Enable IPv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: yes

    - name: Enable IPv6 forwarding
      sysctl:
        name: net.ipv6.conf.all.forwarding
        value: "1"
        state: present
        reload: yes
