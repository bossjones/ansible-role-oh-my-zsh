---

- name: Check zsh version
  shell: "{{bossjones__oh__my__zsh__path_to_shell}} --version | cut -d ' ' -f2"
  register: bossjones__oh__my__zsh__register_version
  check_mode: no
  changed_when: false
  tags: configure

- name: Set bossjones__oh__my__zsh__version variable
  set_fact:
    bossjones__oh__my__zsh__version: "{{ bossjones__oh__my__zsh__register_version.stdout }}"

- name: Merge bundles lists
  set_fact:
    bossjones__oh__my__zsh__antigen_bundles: "{{ bossjones__oh__my__zsh__antigen_bundles }} + {{ bossjones__oh__my__zsh__antigen_bundles_extras }}"

- name: Disable autoupdate if bossjones__oh__my__zsh__shared install
  set_fact:
    bossjones__oh__my__zsh__update_interval: 0
  when: bossjones__oh__my__zsh__shared

- name: Check commands exists
  shell: |
    # NOTE: All of this is required to properly load "command -v"
    if [ -d "$HOME/.asdf" ]; then
      . $HOME/.asdf/asdf.sh
    fi

    if [ -d "$HOME/.cargo/bin" ]; then
      export PATH=$HOME/.cargo/bin:$PATH
    fi

    if [ -d "/usr/local/go/bin" ]; then
      export PATH=/usr/local/go/bin:$PATH
    fi
    export PATH=$GOPATH/bin:$PATH
    alias cdgo='CDPATH=.:$GOPATH/src/github.com:$GOPATH/src/golang.org:$GOPATH/src'

    if [ -d ~/.goenv ]; then
      export GOENV_ROOT="$HOME/.goenv"
      export PATH="$GOENV_ROOT/bin:$PATH"
      eval "$(goenv init -)"
      export PATH="$GOROOT/bin:$PATH"
      export PATH="$PATH:$GOPATH/bin"
    fi

    # fnm
    export PATH=~/.fnm:$PATH
    # SOURCE: https://github.com/Schniz/fnm
    if [ -n "$(which fnm)" ]; then
        eval "$(fnm env --use-on-cd)"
        if [ "$(fnm ls | grep -i {{NODE_VERSION_TO_INSTALL}} | wc -l)" = "0" ]; then
          fnm install {{NODE_VERSION_TO_INSTALL}} || true
          fnm use {{NODE_VERSION_TO_INSTALL}} || true
          fnm default {{NODE_VERSION_TO_INSTALL}} || true
          fnm current || true
        fi
    fi

    export WORKON_HOME="$HOME/.pyenv/versions"
    export PROJECT_HOME=$HOME/dev

    [ -f ~/.fzf.zsh ] && . ~/.fzf.zsh

    if [ -e {{rbenv_root}} ]; then
      export PATH="{{rbenv_root}}/shims:$PATH"
    fi
    if [[ -x $(which rbenv) ]]; then
      eval "$(rbenv init -)"
    fi

    if [ -e ~/.pyenv ]; then
      export PYENV_ROOT=~/.pyenv
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
      pyenv virtualenvwrapper_lazy
    fi

    if [ -d "$HOME/bin" ]; then
      export PATH=$HOME/bin:$PATH
    fi

    command -v {{ item.command }} || which {{ item.command }}
  with_items: "{{ bossjones__oh__my__zsh__antigen_bundles }}"
  failed_when: false
  changed_when: false
  check_mode: no
  when: item.command is defined
  register: bossjones__oh__my__zsh__register_commands_exists
  environment:
    PATH: "{{ bossjones__oh__my__zsh__static_paths_for_proper_install_of_antigen }}"
    GOENV_ROOT: "{{ bossjones__oh__my__zsh__goenv_root }}"

- name: Merge hotkeys lists
  set_fact:
    bossjones__oh__my__zsh__hotkeys: "{{ bossjones__oh__my__zsh__hotkeys }} + {{ bossjones__oh__my__zsh__hotkeys_extras }}"

- name: Check antigen version
  shell: "{{bossjones__oh__my__zsh__path_to_cat}} {{ bossjones__oh__my__zsh__antigen_path }}/antigen/VERSION | tr -d 'v'"
  register: bossjones__oh__my__zsh__register_antigen_version
  changed_when: false
  become: true
  check_mode: no
  tags: configure

- name: Set bossjones__oh__my__zsh__antigen_installed_version variable
  set_fact:
    bossjones__oh__my__zsh__antigen_installed_version: "{{ bossjones__oh__my__zsh__register_antigen_version.stdout }}"

- name: 'DEBUGGER - bossjones__oh__my__zsh__version'
  debug:
    msg: "{{ bossjones__oh__my__zsh__version }}"

- name: 'DEBUGGER - bossjones__oh__my__zsh__version | get_var_type'
  debug:
    msg: "{{ bossjones__oh__my__zsh__version | get_var_type }}"

- name: 'DEBUGGER - bossjones__oh__my__zsh__antigen_installed_version'
  debug:
    msg: "{{ bossjones__oh__my__zsh__antigen_installed_version }}"

- name: 'DEBUGGER - bossjones__oh__my__zsh__antigen_installed_version | get_var_type'
  debug:
    msg: "{{ bossjones__oh__my__zsh__antigen_installed_version | get_var_type }}"

- name: 'DEBUGGER - bossjones__oh__my__zsh__antigen_installed_version | int'
  debug:
    msg: "{{ bossjones__oh__my__zsh__antigen_installed_version | int }}"

- name: 'DEBUGGER - bossjones__oh__my__zsh__version'
  debug:
    msg: "{{ bossjones__oh__my__zsh__version }}"

- name: 'DEBUGGER - bossjones__oh__my__zsh__version | get_var_type'
  debug:
    msg: "{{ bossjones__oh__my__zsh__version | get_var_type }}"

- name: 'DEBUGGER - bossjones__oh__my__zsh__version is version("5.1", operator="lt", strict=True)'
  debug:
    msg: "{{ bossjones__oh__my__zsh__version is version('5.1', operator='lt', strict=True) }}"

- name: Write .zshrc config
  template:
    src: zshrc.j2
    dest: "{{ bossjones__oh__my__zsh__config }}"
    owner: "{{ bossjones__oh__my__zsh__user }}"
    group: "{{ bossjones__oh__my__zsh__group }}"
    backup: yes

- name: Write .zshrc.local config
  template:
    src: zshrc.local.j2
    dest: "~{{bossjones__oh__my__zsh__user}}/.zshrc.local"
    owner: "{{ bossjones__oh__my__zsh__user }}"
    group: "{{ bossjones__oh__my__zsh__group }}"
    backup: yes

- name: Write .zlogin config
  template:
    src: zlogin.j2
    dest: "~{{bossjones__oh__my__zsh__user}}/.zlogin"
    owner: "{{ bossjones__oh__my__zsh__user }}"
    group: "{{ bossjones__oh__my__zsh__group }}"
    backup: yes
  when: bossjones__oh__my__zsh__enable_zlogin == "yes"

- name: Write .zlogout config
  template:
    src: zlogout.j2
    dest: "~{{bossjones__oh__my__zsh__user}}/.zlogout"
    owner: "{{ bossjones__oh__my__zsh__user }}"
    group: "{{ bossjones__oh__my__zsh__group }}"
    backup: yes
  when: bossjones__oh__my__zsh__enable_zlogout == "yes"

- name: Write .zprofile config
  template:
    src: zprofile.j2
    dest: "~{{bossjones__oh__my__zsh__user}}/.zprofile"
    owner: "{{ bossjones__oh__my__zsh__user }}"
    group: "{{ bossjones__oh__my__zsh__group }}"
    backup: yes
  when: bossjones__oh__my__zsh__enable_zprofile == "yes"

- name: Write .zshenv config
  template:
    src: zshenv.j2
    dest: "~{{bossjones__oh__my__zsh__user}}/.zshenv"
    owner: "{{ bossjones__oh__my__zsh__user }}"
    group: "{{ bossjones__oh__my__zsh__group }}"
    backup: yes
  when: bossjones__oh__my__zsh__enable_zshenv == "yes"

- name: "Ensure {{bossjones__oh__my__zsh__path_to_shell}} is in /etc/shells"
  lineinfile:
    path: /etc/shells
    regexp: '^{{bossjones__oh__my__zsh__path_to_shell}}$'
    line: '{{bossjones__oh__my__zsh__path_to_shell}}'
  become: true
  when: bossjones__oh__my__zsh__change_default_shell

- name: Set zsh as default shell
  user:
    name: "{{ bossjones__oh__my__zsh__user }}"
    shell: "{{ bossjones__oh__my__zsh__path_to_shell }}"
  become: true
  when: not bossjones__oh__my__zsh__shared and bossjones__oh__my__zsh__change_default_shell

- name: Add skip_global_compinit for disable early compinit call in Ubuntu
  lineinfile:
    regexp: "skip_global_compinit=1"
    line: "skip_global_compinit=1"
    dest: /etc/zsh/zshenv
    state: present
  when: ansible_distribution == 'Ubuntu'

# - name: Clone pyenv-virtualenvwrapper
#   git:
#     repo: https://github.com/junegunn/fzf.git
#     dest: "~{{bossjones__oh__my__zsh__user}}/.fzf"
#     version: "0.18.0"
#     force: yes
#   become: yes
#   become_user: "{{ bossjones__oh__my__zsh__user }}"
#   register: bossjones__oh__my__zsh__register_fzf

# # ./install --all
