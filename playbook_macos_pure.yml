# USAGE: sudo ansible-playbook --ask-become-pass --check -i "localhost," -c local playbook_ubuntu_pure.yml --extra-vars="bossjones__oh__my__zsh__user=$(whoami) bossjones__oh__my__zsh__theme=powerlevel"
# USAGE: sudo ansible-playbook --ask-become-pass --check -i "localhost," -c local playbook_ubuntu_pure.yml --extra-vars="bossjones__oh__my__zsh__user=$(whoami) bossjones__oh__my__zsh__theme=pure"
---

# # rbenv
# git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
# echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.zshrc
# echo 'eval "$(rbenv init -)"' >> ~/.zshrc
# git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build

# # ruby
# sudo apt-get install -y build-essential bison ruby-dev rake zlib1g-dev \
#     libyaml-dev libssl-dev libreadline-dev libncurses5-dev llvm llvm-dev \
#     libeditline-dev libedit-dev
# rbenv install 2.2.3

- hosts: localhost
  become: yes
  become_method: sudo
  # environment:
  #   # NVM_LAZY_LOAD: yes
  #   NODE_VERSION_TO_INSTALL: 10.3.0
  vars:
    bossjones__oh__my__zsh__theme: "pure"
    NODE_VERSION_TO_INSTALL: 10.3.0
    rbenv:
      env: system
      version: v1.1.2
      default_ruby: 2.6.6
      rubies:
        - version: 2.6.6

    rbenv_clean_up: false

    rbenv_repo: "https://github.com/rbenv/rbenv.git"

    rbenv_plugins:
      - { name: "rbenv-vars",         repo: "https://github.com/rbenv/rbenv-vars.git",         version: "master" }
      - { name: "ruby-build",         repo: "https://github.com/rbenv/ruby-build.git",         version: "master" }
      - { name: "rbenv-default-gems", repo: "https://github.com/rbenv/rbenv-default-gems.git", version: "master" }
      - { name: "rbenv-installer",    repo: "https://github.com/rbenv/rbenv-installer.git",    version: "master" }
      - { name: "rbenv-update",       repo: "https://github.com/rkh/rbenv-update.git",         version: "master" }
      - { name: "rbenv-whatis",       repo: "https://github.com/rkh/rbenv-whatis.git",         version: "master" }
      - { name: "rbenv-use",          repo: "https://github.com/rkh/rbenv-use.git",            version: "master" }

    rbenv_root: "{% if rbenv.env == 'system' %}/usr/local/rbenv{% else %}~/.rbenv{% endif %}"

    rbenv_set_vars: true

    rbenv_users: []

    rbenv_extra_depends:
    - libssl1.0-dev
    - build-essential
    - bison
    - ruby-dev
    - rake
    - zlib1g-dev
    - libyaml-dev
    - libssl-dev
    - libreadline-dev
    - libncurses5-dev
    - llvm
    - llvm-dev
    - libeditline-dev
    - libedit-dev
    rbenv_apt_packages:
    - build-essential
    - curl
    - git
    - libcurl4-openssl-dev
    - libffi-dev
    - libreadline-dev
    - libssl-dev
    - libxml2-dev
    - libxslt1-dev
    - zlib1g-dev
    rbenv_dnf_packages:
    - curl
    - gcc
    - openssl-devel
    - libyaml-devel
    - readline-devel
    - zlib-devel
    - libffi-devel
    - git
    rbenv_yum_packages:
    - bzip2
    - curl
    - gcc
    - git
    - libffi-devel
    - libyaml-devel
    - openssl-devel
    - readline-devel
    - zlib-devel
    rbenv_user_profile: true
    bossjones__oh__my__zsh__enable_zlogin: "yes"
    bossjones__oh__my__zsh__enable_zlogout: "yes"
    bossjones__oh__my__zsh__enable_zprofile: "no"
    bossjones__oh__my__zsh__enable_zshenv: "yes"
    bossjones__oh__my__zsh__change_default_shell: no
    bossjones__oh__my__zsh__path_to_shell: /usr/local/bin/zsh
    bossjones__oh__my__zsh__antigen_bundles_extras:
      # - nvm
      # Solarized dircolors plugin for zsh
      - joel-porquet/zsh-dircolors-solarized

      # peco/percol/fzf wrapper plugin for zsh
      - mollifier/anyframe

      #  A utility tool powered by fzf for using git interactively.
      - wfxr/forgit

      - { name: eventi/noreallyjustfuckingstopalready, command: killall }
      # https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins
      - { name: vscode, command: code }
      - { name: gpg-agent, command: gpg-agent }
      - history
      - { name: fd, command: fd }
      - { name: autopep8, command: autopep8 }
      - { name: pylint, command: pylint }
      - { name: ELLIOTTCABLE/rbenv.plugin.zsh, command: ruby }
      - { name: colored-man-pages, command: man }

      - { name: bossjones/boss-git-zsh-plugin, command: git }
      - { name: bossjones/boss-docker-zsh-plugin, command: docker }

      # A zsh plugin to sync git repositories and clean them up.
      - caarlos0/zsh-git-sync

      # This ZSH plugin enhances the terminal environment with 256 colors. It looks at the chosen TERM environment variable and sees if there is respective (n-)curses' termcap/terminfo descriptors for 256 colors available. The result is a multicolor terminal, if available.
      - chrissicool/zsh-256color

      # Desktop notifications for long-running commands in zsh.
      - marzocchi/zsh-notify
      # Add zsh's missing hooks, and support for user-defined hooks
      - willghatch/zsh-hooks

      # A collection of git utilities and useful extra git scripts I've discovered or written, packaged for ease of use with shell frameworks.
      - unixorn/git-extra-commands

      # alias for docker aliases
      - { name: hadenlabs/zsh-docker, command: docker }
      # servers functions for shell
      - luismayta/zsh-servers-functions
      # Search ssh connect with peco
      - { name: luismayta/zsh-peco-ssh-connect, command: peco }

      # Plugin for lazy-loading pyenv in zsh.
      - { name: erikced/zsh-pyenv-lazy-load, command: pyenv }

      - { name: vagrant, command: vagrant }

      # Convert seconds to a human readable string: 165392 â†’ 1d 21h 56m 32s
      - sindresorhus/pretty-time-zsh

      # Because your terminal should be able to perform tasks asynchronously without external tools!
      - mafredri/zsh-async

      - asdf
      # Pretty, minimal and fast ZSH prompt
      - sindresorhus/pure

    bossjones__oh__my__zsh__autosuggestions_bind_key: "^U"
    bossjones__oh__my__zsh__path:
      # - "~/.rbenv/shims"
      - $HOME/bin
      - $HOME/.bin
      - $HOME/.local/bin
      - $HOME/.pyenv/bin
      - $HOME/.rbenv/bin
      - $HOME/.fnm
      - /usr/local/opt/coreutils/libexec/gnubin
      - /usr/local/sbin
      - /usr/local/bin
      - /usr/sbin
      - /usr/bin
      - /sbin
      - /bin
      # - /usr/games
      # - /usr/local/games

    # SOURCE: https://github.com/sorin-ionescu/prezto/blob/4f19700919c8ebbaf75755fc0d03716d13183f49/runcoms/zshenv
    # #
    # # Defines environment variables.
    # #
    # # Authors:
    # #   Sorin Ionescu <sorin.ionescu@gmail.com>
    # #

    # # Ensure that a non-login, non-interactive shell has a defined environment.
    # if [[ "$SHLVL" -eq 1 && ! -o LOGIN && -s "${ZDOTDIR:-$HOME}/.zprofile" ]]; then
    #   source "${ZDOTDIR:-$HOME}/.zprofile"
    # fi

    bossjones__oh__my__zsh__zshenv: |-
      # Since .zshenv is always sourced, it often contains exported variables that should be available to other programs. For example, $PATH, $EDITOR, and $PAGER are often set in .zshenv. Also, you can set $ZDOTDIR in .zshenv to specify an alternative location for the rest of your zsh configuration.
      # ~/.zshenv: system-wide .zshenv file for zsh(1).
      #
      # This file is sourced on all invocations of the shell.
      # If the -f flag is present or if the NO_RCS option is
      # set within this file, all other initialization files
      # are skipped.
      #
      # This file should contain commands to set the command
      # search path, plus other important environment variables.
      # This file should not contain commands that produce
      # output or assume the shell is attached to a tty.
      #
      # Global Order: zshenv, zprofile, zshrc, zlogin

      export RBENV_ROOT=~/.rbenv

      if [[ -z "$PATH" || "$PATH" == "/bin:/usr/bin" ]]
      then
        export PATH="/usr/local/bin:/usr/bin:/bin"
        export PATH="~/.rbenv/shims:$HOME/bin:$HOME/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"
      fi
      skip_global_compinit=1

    # /usr/local/rbenv/shims:/home/vagrant/bin:/home/vagrant/.local/bin:/home/vagrant/.pyenv/bin:/home/vagrant/.rbenv/bin:/home/vagrant/.fnm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games

    bossjones__oh__my__zsh__zlogin: |-
      # https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout
      #
      # Executes commands at login post-zshrc.
      #
      # Authors:
      #   Sorin Ionescu <sorin.ionescu@gmail.com>
      #
      # /etc/zsh/zlogin: system-wide .zlogin file for zsh(1).
      #
      # This file is sourced only for login shells. It
      # should contain commands that should be executed only
      # in login shells. It should be used to set the terminal
      # type and run a series of external commands (fortune,
      # msgs, from, etc.)
      #
      # Global Order: zshenv, zprofile, zshrc, zlogin

      source ~/.zshrc


    bossjones__oh__my__zsh__before_scripts:
      - name: secrets.zsh
        content: |-
          [ -f ~/.secret ] && . ~/.secret

      - name: asdf.zsh
        content: |-
          ASDF_DIR="${ASDF_DIR:-$HOME/.asdf}"
          ASDF_COMPLETIONS="$ASDF_DIR/completions"

          # if [ -d "$HOME/.asdf" ]; then

          #   . $HOME/.asdf/asdf.sh
          # fi

          # Load command
          if [[ -f "$ASDF_DIR/asdf.sh" ]]; then
              . "$ASDF_DIR/asdf.sh"

              fpath=(${ASDF_DIR}/completions $fpath)

              # Load completions
              if [[ -f "$ASDF_COMPLETIONS/asdf.bash" ]]; then
                  . "$ASDF_COMPLETIONS/asdf.bash"
              fi

              # autoload -Uz compinit
              # compinit
          fi


      - name: rust.zsh
        content: |-
          if [ -d "$HOME/.cargo/bin" ]; then
            export PATH=$HOME/.cargo/bin:$PATH
          fi
      - name: go.zsh
        content: |-
          if [ -d "/usr/local/go/bin" ]; then
            export PATH=/usr/local/go/bin:$PATH
          fi
          export PATH=$GOPATH/bin:$PATH
          alias cdgo='CDPATH=.:$GOPATH/src/github.com:$GOPATH/src/golang.org:$GOPATH/src'

      - name: workon.zsh
        content: |-
          export WORKON_HOME="$HOME/.pyenv/versions"
          export PROJECT_HOME=$HOME/dev

      - name: fzf.zsh
        content: |-
          [ -f ~/.fzf.zsh ] && . ~/.fzf.zsh

      - name: pure.zsh
        content: |-
          if [ -d "$HOME/.zsh/pure" ]; then
            fpath+=$HOME/.zsh/pure
          fi

      - name: poetry.zsh
        content: |-
          if [ -d "$HOME/.asdf/installs/poetry/1.0.10/env" ]; then
            . $HOME/.asdf/installs/poetry/1.0.10/env
          fi

    bossjones__oh__my__zsh__after_scripts:

      - name: asdf.zsh
        content: |-
          ASDF_DIR="${ASDF_DIR:-$HOME/.asdf}"
          ASDF_COMPLETIONS="$ASDF_DIR/completions"

          # if [ -d "$HOME/.asdf" ]; then

          #   . $HOME/.asdf/asdf.sh
          # fi

          # Load command
          if [[ -f "$ASDF_DIR/asdf.sh" ]]; then
              . "$ASDF_DIR/asdf.sh"

              fpath=(${ASDF_DIR}/completions $fpath)

              # Load completions
              if [[ -f "$ASDF_COMPLETIONS/asdf.bash" ]]; then
                  . "$ASDF_COMPLETIONS/asdf.bash"
              fi

              # autoload -Uz compinit
              # compinit
          fi


      - name: nvm.zsh
        content: |-
          # # nvm is installed via homebrew. Here are instructions:
          # #
          # # You should create NVM's working directory if it doesn't exist:
          # #
          # #   mkdir ~/.nvm
          # #
          # # Add the following to ~/.zshrc or your desired shell
          # # configuration file:
          # #
          # #   export NVM_DIR="$HOME/.nvm"
          # #   . "/usr/local/opt/nvm/nvm.sh"
          # if [ -d "$HOME/.nvm" ]; then
          #   export NVM_DIR="$HOME/.nvm"
          #   . "$HOME/.nvm/nvm.sh"
          # fi
          # if [ -f "/usr/local/opt/nvm/nvm.sh" ]; then
          #   . "/usr/local/opt/nvm/nvm.sh"
          # fi

      - name: yq.zsh
        content: |-
          if [ -e "${HOME}/.asdf/shims/yq" ]; then
              yq shell-completion zsh > "${fpath[1]}/_yq"
          fi

          if [ -e /usr/local/bin/yq ]; then
              yq shell-completion zsh > "${fpath[1]}/_yq"
          fi


      - name: fnm.zsh
        content: |-
          # SOURCE: https://github.com/Schniz/fnm
          if [ -n "$(which fnm)" ]; then
              eval "$(fnm env)"
              if [ "$(fnm ls | grep -i 10.3.0 | wc -l | awk '{print $1}')" = "0" ]; then
                fnm install {{NODE_VERSION_TO_INSTALL}} || true
                fnm use {{NODE_VERSION_TO_INSTALL}} || true
                fnm default {{NODE_VERSION_TO_INSTALL}} || true
                fnm current
              fi
          fi


      - name: hub.zsh
        content: |-
          # https://github.com/github/hub/issues/1419
          repos_via_hub() {
            local user="${1?}"
            shift 1
            paginate hub api -t graphql -f user="$user" "$@" -f query='
              query($user: String!, $per_page: Int = 100, $after: String) {
                user(login: $user) {
                  repositories(first: $per_page, after: $after) {
                    nodes {
                      nameWithOwner
                    }
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                  }
                }
              }
            '
          }
          paginate() {
            local output cursor
            output="$("$@")"
            cursor="$(awk '/\.hasNextPage/ { has_next=$2 } /\.endCursor/ { if (has_next=="true") print $2 }' <<<"$output")"
            printf "%s\n" "$output"
            [ -z "$cursor" ] || paginate "$@" -f after="$cursor"
          }
          # USAGE: repos_via_hub "bossjones" | awk '/\.nameWithOwner\t/ { print $2 }'


      - name: vpn.zsh
        content: |-
          alias vpn="sudo openconnect --user=$(whoami) --os=mac-intel asa-virginia-1.adobe.com"

      - name: aws_utils.zsh
        content: |-
          awslookup() {
            # SOURCE: https://engineering.talis.com/articles/bash-awslookup-tool/
            # uses aws cli to lookup instances based on a filter on the Name tag
            # $1 is the filter to use
            # $2 is the output format defaults to 'table'
            # $3 is optional, the value doesn't matter but if passed in will result
            #    in this function printing out the raw command its about to run
            #    for debugging purposes
            cmd="aws ec2 describe-instances --filters \"Name=tag:Name,Values=$1\" --query 'Reservations[].Instances[].[InstanceId,PublicDnsName,PrivateIpAddress,State.Name,InstanceType,join(\`,\`,Tags[?Key==\`Name\`].Value)]' --output ${2:-table}"
            if [ $# -eq 3 ]
            then
              echo "Running $cmd"
            fi
            eval $cmd
          }

      - name: gnubin.zsh
        content: |-
          alias ls="ls --color=always"

      - name: git_cu.zsh
        content: |-
          export GIT_CU_DIR="${HOME}/dev"

      - name: fzf.zsh
        content: |
          [ -f ~/.fzf.zsh ] && . ~/.fzf.zsh

          export FZF_TMUX_OPTS="-d 15"

      - name: glob.zsh
        content: |
          # see `man zshoptions`
          setopt EXTENDED_GLOB

      - name: history.zsh
        content: |
          # # see `man zshoptions`
          # # SOURCE: https://linux.die.net/man/1/zshoptions
          # # SOURCE: http://zsh.sourceforge.net/Doc/Release/Options.html
          # # Save each command's beginning timestamp (in seconds since the epoch) and the duration (in seconds) to the history file. The format of this prefixed data is:
          # # ':<beginning time>:<elapsed seconds>:<command>'.
          # setopt EXTENDED_HISTORY

          # # If a new command line being added to the history list duplicates an older one, the older command is removed from the list (even if it is not the previous event).
          # setopt HIST_IGNORE_ALL_DUPS

          # # APPEND_HISTORY <D>
          # # If this is set, zsh sessions will append their history list to the history file, rather than replace it. Thus, multiple parallel zsh sessions will all have the new entries from their history lists added to the history file, in the order that they exit. The file will still be periodically re-written to trim it when the number of lines grows 20% beyond the value specified by $SAVEHIST (see also the HIST_SAVE_BY_COPY option).
          # # --------------------------------------------------
          # # This options works like APPEND_HISTORY except that new history lines are added to the $HISTFILE incrementally (as soon as they are entered), rather than waiting until the shell exits. The file will still be periodically re-written to trim it when the number of lines grows 20% beyond the value specified by $SAVEHIST (see also the HIST_SAVE_BY_COPY option).
          # setopt INC_APPEND_HISTORY

          # setopt INC_APPEND_HISTORY_TIME
          # setopt SHARE_HISTORY

          # SOURCE: https://github.com/balakrishnanc/dotfiles/blob/bff74304808b68ffbc571b2d13d3b8077ce65c4e/zsh/zshenv.template
          # Remove superfluous blanks from each command line being added
          #  to the history list.
          setopt HIST_REDUCE_BLANKS

          # When writing out the history file, older commands that duplicate newer ones
          #  are omitted.
          setopt HIST_SAVE_NO_DUPS

          # If you find that you want more control over when commands get imported,
          #  you may wish to turn SHARE_HISTORY off,
          #  INC_APPEND_HISTORY or INC_APPEND_HISTORY_TIME on, and then manually import
          #  commands whenever you need them using 'fc -RI'.
          unsetopt SHARE_HISTORY

          # This option is a variant of INC_APPEND_HISTORY in which, where possible,
          #  the history entry is written out to the file after the command is finished,
          #  so that the time taken by the command is recorded correctly in the
          #  history file in EXTENDED_HISTORY format. This means that the history entry
          #  will not be available immediately from other instances of the shell that are
          #  using the same history file.
          # This option is only useful if INC_APPEND_HISTORY and SHARE_HISTORY are
          #  turned off. The three options should be considered mutually exclusive.
          setopt INC_APPEND_HISTORY_TIME

          # This options works like APPEND_HISTORY except that new history lines are
          #  added to the $HISTFILE incrementally (as soon as they are entered),
          #  rather than waiting until the shell exits.
          unsetopt INC_APPEND_HISTORY

      - name: rbenv.zsh
        content: |
          if [ -e ~/.rbenv ]; then
            export PATH="~/.rbenv/shims:$PATH"
          fi
          if [[ -x $(which -p rbenv) ]]; then
            eval "$(rbenv init -)"
          fi

      - name: man.zsh
        content: |
          get_man_exorts() {
            for i in /usr/local/Cellar/*/*/share/man; do
              echo 'export MANPATH="'$i':$MANPATH"'
            done
            for i in /usr/local/Cellar/*/*/libexec/gnuman; do
              echo 'export MANPATH="'$i':$MANPATH"'
            done
          }

      - name: path.zsh
        content: |
          if [ -d "$HOME/bin" ]; then
            export PATH=$HOME/bin:$PATH
          fi

      - name: cheat.zsh
        content: |
          export CHEAT_CONFIG_PATH="~/.config/cheat/conf.yml"

      - name: custom.zsh
        content: |
          cp_mp4() {
              rm -fv cp.txt
              touch cp.txt
              mkdir reactions_copy || true
              [ "$(ls *.mp4 | tr " " '\r' | wc -l | awk '{print $1}')" -gt "0" ] && for filename in ./*mp4*; do echo cp -av "${filename}" reactions_copy/; done >> cp.txt
              bash -x cp.txt
          }

      - name: unzip.zsh
        content: |
          # darktop config (8/10/2020)
          export PATH="/usr/local/opt/unzip/bin:$PATH"

      - name: imagemagick.zsh
        content: |
          imagemagick_white_jpg(){
              # create white background first
              convert -size 1080x1080 xc:white white.jpg
          }

          imagemagick_resize_square_batch() {
              imagemagick_white_jpg
              rm -fv loop.txt
              touch loop.txt
              OIFS="$IFS"
              IFS=$'\n'
              for file in `find . -maxdepth 1 -mindepth 1 -type f -name "*.png"`
              do
                  echo "file = $file"
                  echo imagemagick_resize_square "$file" >> loop.txt
              done
              for file in `find . -maxdepth 1 -mindepth 1 -type f -name "*.jpg"`
              do
                  echo "file = $file"
                  echo imagemagick_resize_square "$file" >> loop.txt
              done
              for file in `find . -maxdepth 1 -mindepth 1 -type f -name "*.jpeg"`
              do
                  echo "file = $file"
                  echo imagemagick_resize_square "$file" >> loop.txt
              done
              for file in `find . -maxdepth 1 -mindepth 1 -type f -name "*.JPG"`
              do
                  echo "file = $file"
                  echo imagemagick_resize_square "$file" >> loop.txt
              done
              for file in `find . -maxdepth 1 -mindepth 1 -type f -name "*.JPEG"`
              do
                  echo "file = $file"
                  echo imagemagick_resize_square "$file" >> loop.txt
              done

              cat loop.txt
              gsed -i "s,\.\/,'\.\/,g" loop.txt
              gsed -i "s,$,',g" loop.txt
              sort -ru loop.txt > loop.sh
              cat loop.sh
              bash loop.sh
              rm loop.sh
              rm loop.txt
              ls -lta
              IFS="$OIFS"
          }


      - name: ffmpegutils.zsh
        content: |
          function crop_yt_tiktoks() {
              local _input=$(basename -- "${1}" | cut -d"." -f1)
              local get_extension=$(basename -- $1 | cut -d"." -f2)
              local _input_fname="${_input}.${get_extension}"
              local _out_fname="${_input}_out.${get_extension}"

              echo "_input = $_input"
              echo "get_extension = $get_extension"
              echo "_input_fname = $_input_fname"
              echo "_out_fname = $_out_fname"

              echo "ffmpeg -y -i \"${_input_fname}\" -filter:v \"crop=403:720:441:436:keep_aspect=1\" -c:a copy \"${_out_fname}\""

              ffmpeg -y -i "${_input_fname}" -filter:v "crop=403:720:441:436:keep_aspect=1" -c:a copy "${_out_fname}"
          }


          # https://gist.github.com/jonsuh/3c89c004888dfc7352be
          # ----------------------------------
          # Colors
          # ----------------------------------
          export NOCOLOR='\033[0m'
          export RED='\033[0;31m'
          export GREEN='\033[0;32m'
          export ORANGE='\033[0;33m'
          export BLUE='\033[0;34m'
          export MAD_BLUE='\e[34m'
          export PURPLE='\033[0;35m'
          export CYAN='\033[0;36m'
          export LIGHTGRAY='\033[0;37m'
          export DARKGRAY='\033[1;30m'
          export LIGHTRED='\033[1;31m'
          export LIGHTGREEN='\033[1;32m'
          export YELLOW='\033[1;33m'
          export LIGHTBLUE='\033[1;34m'
          export LIGHTPURPLE='\033[1;35m'
          export LIGHTCYAN='\033[1;36m'
          export WHITE='\033[1;37m'

          get_loop_commands() {
              rm loop.txt || true
              for filename in ./*.mp4; do echo ffmpeg-loop \"$filename\"; done > loop.txt
              cat loop.txt
          }

          ffmpeg-generate-ig-square() {
              rm -fv square.txt
              touch square.txt
              [ "$(ls *.jpg | tr " " '\r' | wc -l | awk '{print $1}')" -gt "0" ] && for filename in ./*jpg*; do echo ffmpeg -hide_banner -loglevel warning -i "$filename" -vf "scale=1080:1080:force_original_aspect_ratio=decrease,pad=1080:1080:-1:-1:color=white,setdar=1:1" "ig-square-1080x1080-$(basename -- "${filename}")"; done >> square.txt
              [ "$(ls *.jpeg | tr " " '\r' | wc -l | awk '{print $1}')" -gt "0" ] && for filename in ./*jpeg*; do echo ffmpeg -hide_banner -loglevel warning -i "$filename" -vf "scale=1080:1080:force_original_aspect_ratio=decrease,pad=1080:1080:-1:-1:color=white,setdar=1:1" "ig-square-1080x1080-$(basename -- "${filename}")"; done >> square.txt
              [ "$(ls *.png | tr " " '\r' | wc -l | awk '{print $1}')" -gt "0" ] && for filename in ./*png*; do echo ffmpeg -hide_banner -loglevel warning -i "$filename" -vf "scale=1080:1080:force_original_aspect_ratio=decrease,pad=1080:1080:-1:-1:color=white,setdar=1:1" "ig-square-1080x1080-$(basename -- "${filename}")"; done >> square.txt
              cat square.txt
              bash square.txt
              rm square.txt
          }

          ffmpeg-square-mp4() {
              OIFS="$IFS"
              IFS=$'\n'
              rm -fv square.txt
              touch square.txt
              [ "$(ls *.mp4 | tr " " '\r' | wc -l | awk '{print $1}')" -gt "0" ] && for filename in ./*mp4*; do echo ffmpeg -hide_banner -loglevel warning -i "${filename}" -vf "scale=1080:1080:force_original_aspect_ratio=decrease,pad=1080:1080:-1:-1:color=white,setdar=1:1" "ig-square-1080x1080-$(basename -- "${filename}")"; done >> square.txt
              cat square.txt
              bash square.txt
              rm square.txt
              IFS="$OIFS"
          }
          # $(PWD)/

          ffmpeg-crop-story-batch() {
              OIFS="$IFS"
              IFS=$'\n'
              rm -fv story.txt
              touch story.txt
              [ "$(ls *.mp4 | tr " " '\r' | wc -l | awk '{print $1}')" -gt "0" ] && for filename in ./*mp4*; do echo ffmpeg-crop-story "${filename}"; done >> story.txt
              cat story.txt
              bash story.txt
              rm story.txt
              IFS="$OIFS"
          }
          # $(PWD)/

          ffmpeg-mov-to-mp4() {
              OIFS="$IFS"
              IFS=$'\n'
              rm -fv square.txt || true
              touch square.txt
              current_dir=$(PWD)
              # ffmpeg -i "${filename}" -vcodec h264 -acodec mp2 "mp4-$(basename -- "${filename}")"
              [ "$(ls *.MOV | tr " " '\r' | wc -l | awk '{print $1}')" -gt "0" ] && for filename in ./*MOV*; do echo ffmpeg-mov-to-mp4 $(python3 -c "import pathlib;p=pathlib.Path('${filename}');print(p)"); done >> square.txt
              [ "$(ls *.mov | tr " " '\r' | wc -l | awk '{print $1}')" -gt "0" ] && for filename in ./*mov*; do echo ffmpeg-mov-to-mp4 $(python3 -c "import pathlib;p=pathlib.Path('${filename}');print(p)"); done >> square.txt
              cat square.txt
              # bash square.txt
              rm square.txt || true
              IFS="$OIFS"
          }
          # $(PWD)/

          ffmpeg-dimensions-mp4() {
              rm -fv loop.txt
              touch loop.txt
              # rm -fv dimensions.txt
              # touch dimensions.txt

              OIFS="$IFS"
              IFS=$'\n'
              for file in `find . -maxdepth 1 -mindepth 1 -type f -name "*.mp4"`
              do
                  echo "file = $file"
                  echo ffmpeg-dimensions -f "$file" >> loop.txt
              done

              cat loop.txt
              gsed -i "s,\.\/,'\.\/,g" loop.txt
              gsed -i "s,$,',g" loop.txt
              cat loop.txt
              bash loop.txt >> dimensions_info.txt
              rm loop.txt
              sort -ru dimensions_info.txt > dimensions.txt
              # rm dimensions_info.txt || true
              cat dimensions.txt
              IFS="$OIFS"

          }

          ffmpeg-dimensions-jpeg() {
              rm -fv loop.txt
              touch loop.txt
              # rm -fv dimensions.txt
              # touch dimensions.txt

              OIFS="$IFS"
              IFS=$'\n'
              for file in `find . -maxdepth 1 -mindepth 1 -type f -name "*.JPEG|*.jpeg|*.JPG|*.jpg"`
              do
                  echo "file = $file"
                  echo ffmpeg-dimensions -f "$file" >> loop.txt
              done

              cat loop.txt
              gsed -i "s,\.\/,'\.\/,g" loop.txt
              gsed -i "s,$,',g" loop.txt
              cat loop.txt
              bash loop.txt >> dimensions_info.txt
              rm loop.txt
              sort -ru dimensions_info.txt > dimensions.txt
              # rm dimensions_info.txt || true
              cat dimensions.txt
              IFS="$OIFS"
          }

          ffmpeg-dimensions-png() {
              rm -fv loop.txt
              touch loop.txt
              # rm -fv dimensions.txt
              # touch dimensions.txt

              OIFS="$IFS"
              IFS=$'\n'
              for file in `find . -maxdepth 1 -mindepth 1 -type f -name "*.png"`
              do
                  echo "file = $file"
                  echo ffmpeg-dimensions -f "$file" >> loop.txt
              done

              cat loop.txt
              gsed -i "s,\.\/,'\.\/,g" loop.txt
              gsed -i "s,$,',g" loop.txt
              cat loop.txt
              bash loop.txt >> dimensions_info.txt
              rm loop.txt
              sort -ru dimensions_info.txt > dimensions.txt
              # rm dimensions_info.txt || true
              cat dimensions.txt
              IFS="$OIFS"
          }

          ffmpeg-dimensions-mov() {
              rm -fv loop.txt
              touch loop.txt
              # rm -fv dimensions.txt
              # touch dimensions.txt

              OIFS="$IFS"
              IFS=$'\n'
              for file in `find . -maxdepth 1 -mindepth 1 -type f -name "*.MOV|*.mov"`
              do
                  echo "file = $file"
                  echo ffmpeg-dimensions -f "$file" >> loop.txt
              done

              cat loop.txt
              gsed -i "s,\.\/,'\.\/,g" loop.txt
              gsed -i "s,$,',g" loop.txt
              cat loop.txt
              bash loop.txt >> dimensions_info.txt
              rm loop.txt
              sort -ru dimensions_info.txt > dimensions.txt
              # rm dimensions_info.txt || true
              cat dimensions.txt
              IFS="$OIFS"
          }

          ffmpeg-loop-batch() {
              OIFS="$IFS"
              IFS=$'\n'
              rm -fv loop.txt
              touch loop.txt
              [ "$(ls *.mp4 | tr " " '\r' | wc -l | awk '{print $1}')" -gt "0" ] && for filename in ./*mp4*; do echo ffmpeg-loop-one "${filename}"; done >> loop.txt
              cat loop.txt
              bash loop.txt
              rm loop.txt
              IFS="$OIFS"
          }


          ffmpeg-dimensions-all() {
              rm all-dimensions.txt || true
              ffmpeg-dimensions-mp4 >> all-dimensions.txt
              ffmpeg-dimensions-jpeg >> all-dimensions.txt
              ffmpeg-dimensions-png >> all-dimensions.txt
              ffmpeg-dimensions-mov >> all-dimensions.txt
              grep -v "ffmpeg-dimensions" all-dimensions.txt >> temp.txt
              grep -v "file = ./" all-dimensions.txt >> temp.txt
              sort -ru temp.txt > all-dimensions.txt
              echo -e "\n\n ${GREEN}ffmpeg-dimensions-all]${NOCOLOR} ${CYAN}cat all-dimensions.txt${NOCOLOR}\n\n"
              cat all-dimensions.txt
          }

          function crop_yt_tiktoks() {
              local _input=$(basename -- "${1}" | cut -d"." -f1)
              local get_extension=$(basename -- $1 | cut -d"." -f2)
              local _input_fname="${_input}.${get_extension}"
              local _out_fname="${_input}_out.${get_extension}"

              echo "_input = $_input"
              echo "get_extension = $get_extension"
              echo "_input_fname = $_input_fname"
              echo "_out_fname = $_out_fname"

              echo "ffmpeg -y -i \"${_input_fname}\" -filter:v \"crop=403:720:441:436\" -c:a copy \"${_out_fname}\""

              ffmpeg -y -i "${_input_fname}" -filter:v "crop=403:720:441:436" -c:a copy "${_out_fname}"
          }

          # https://stackoverflow.com/questions/7333232/how-to-concatenate-two-mp4-files-using-ffmpeg
          # $ cat mylist.txt
          # file '/path/to/file1'
          # file '/path/to/file2'
          # file '/path/to/file3'

          # $ ffmpeg -f concat -safe 0 -i mylist.txt -c copy output.mp4



      - name: pyenv.zsh
        content: |
          if [ -e ~/.pyenv ]; then
            export PYENV_ROOT=~/.pyenv
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init -)"
            pyenv virtualenvwrapper_lazy
          fi

          enable_compile_flags() {
            # SOURCE: https://github.com/jiansoung/issues-list/issues/13
            # Fixes: zipimport.ZipImportError: can't decompress data; zlib not available
            export PATH="/usr/local/opt/tcl-tk/bin:$PATH"
            export PATH="/usr/local/opt/bzip2/bin:$PATH"
            export PATH="/usr/local/opt/ncurses/bin:$PATH"
            export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"
            # SOURCE: https://github.com/jiansoung/issues-list/issues/13
            # Fixes: zipimport.ZipImportError: can't decompress data; zlib not available
            export CFLAGS="${CFLAGS} -I$(brew --prefix tcl-tk)/include"
            export LDFLAGS="${LDFLAGS} -L/usr/local/opt/tcl-tk/lib"
            export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/tcl-tk/include"
            export LDFLAGS="${LDFLAGS} -L/usr/local/opt/zlib/lib"
            export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/zlib/include"
            export LDFLAGS="${LDFLAGS} -L/usr/local/opt/sqlite/lib"
            export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/sqlite/include"
            export LDFLAGS="${LDFLAGS} -L/usr/local/opt/libffi/lib"
            export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/libffi/include"
            export LDFLAGS="${LDFLAGS} -L/usr/local/opt/bzip2/lib"
            export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/bzip2/include"
            export LDFLAGS="${LDFLAGS} -L/usr/local/opt/ncurses/lib"
            export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/ncurses/include"
            export LDFLAGS="${LDFLAGS} -L/usr/local/opt/openssl@1.1/lib"
            export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/openssl@1.1/include"
            export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/zlib/lib/pkgconfig"
            export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/sqlite/lib/pkgconfig"
            export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/tcl-tk/lib/pkgconfig"
            export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/libffi/lib/pkgconfig"
            export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/ncurses/lib/pkgconfig"
            export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/openssl@1.1/lib/pkgconfig"
            export PYTHON_CONFIGURE_OPTS="--with-tcltk-includes='-I$(brew --prefix tcl-tk)/include' --with-tcltk-libs='-L$(brew --prefix tcl-tk)/lib -ltcl8.6 -ltk8.6'"
            export PROFILE_TASK='-m test.regrtest --pgo \
                  test_array \
                  test_base64 \
                  test_binascii \
                  test_binhex \
                  test_binop \
                  test_bytes \
                  test_c_locale_coercion \
                  test_class \
                  test_cmath \
                  test_codecs \
                  test_compile \
                  test_complex \
                  test_csv \
                  test_decimal \
                  test_dict \
                  test_float \
                  test_fstring \
                  test_hashlib \
                  test_io \
                  test_iter \
                  test_json \
                  test_long \
                  test_math \
                  test_memoryview \
                  test_pickle \
                  test_re \
                  test_set \
                  test_slice \
                  test_struct \
                  test_threading \
                  test_time \
                  test_traceback \
                  test_unicode \
            '
          }
          print_compile_flags() {
            # echo "export LDFLAGS=\"${LDFLAGS} -L/usr/local/opt/zlib/lib\""
            # echo "export CPPFLAGS=\"${CPPFLAGS} -I/usr/local/opt/zlib/include\""
            # echo "export PKG_CONFIG_PATH=\"${PKG_CONFIG_PATH} /usr/local/opt/openssl@1.1/lib/pkgconfig\""
            echo "----------------------"
            echo "Verify pyenv compile env vars"
            echo "----------------------"
            echo "LDFLAGS: ${LDFLAGS}"
            echo "CPPFLAGS: ${CPPFLAGS}"
            echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH}"
            echo "----------------------"
          }

          function compile_python() {
              if [ ! -d "${PYENV_ROOT}/versions/${_PY_VER_MAJOR}.${_PY_VER_MINOR}.${_PY_VER_MICRO}" ]; then
              # Control will enter here if $DIRECTORY exists.
              env PYTHON_CONFIGURE_OPTS="--enable-shared --enable-optimizations --enable-ipv6 --with-dtrace --enable-loadable-sqlite-extensions --with-openssl=/usr/local/opt/openssl@1.1" pyenv install -v ${_PY_VER_MAJOR}.${_PY_VER_MINOR}.${_PY_VER_MICRO}
              else
              echo " [python-compile](compile_python) python version ${_PY_VER_MAJOR}.${_PY_VER_MINOR}.${_PY_VER_MICRO} already installed, skipping"
              fi
          }


          function opencv-deps() {
            pip install scipy pillow
            pip install imutils h5py requests progressbar2
            pip install scikit-learn scikit-image
            pip install matplotlib
            mkdir ~/.matplotlib
            touch ~/.matplotlib/matplotlibrc
            echo "backend: TkAgg" >> ~/.matplotlib/matplotlibrc
            pip install tensorflow
            pip install keras
            python -c "import keras;"
            pip install scenedetect[opencv]
          }

      - name: 1pass.zsh
        content: |
          enable_op_cli(){
            # 1pass
            if [ -f /usr/local/bin/op ]; then
                eval $(op signin my)
                eval "$(op completion zsh)"; compdef _op op
            fi
          }

          get_all_secret_dotfiles(){

            op get document ".secret.vault" --output ~/.secret.vault
            chmod 0600 ~/.secret.vault

            op get document "~/.zsh.d/after/cv.zsh" --output ~/.zsh.d/after/cv.zsh || ls -lta ~/.zsh.d/after/cv.zsh
            op get document "~/.zsh.d/after/ffmpeg.zsh" --output ~/.zsh.d/after/ffmpeg.zsh || ls -lta ~/.zsh.d/after/ffmpeg.zsh
            op get document "~/.zsh.d/after/adobe.zsh" --output ~/.zsh.d/after/adobe.zsh || ls -lta ~/.zsh.d/after/adobe.zsh

          }

      - name: updatedb.zsh
        content: |
          # updatedb () {

          #     sudo /usr/libexec/locate.updatedb

          # }

      - name: youtube.zsh
        content: |
          dl(){
              echo "running dl \"${1}\" ..."
              /usr/local/bin/youtube-dl -o "$(uuidgen).%(ext)s" "${1}"
              echo ""
          }

          dl-best(){
              echo "running dl-best \"${1}\" ..."
              /usr/local/bin/youtube-dl -o "$(uuidgen).%(ext)s" -f $(/usr/local/bin/youtube-dl -o "$(uuidgen).%(ext)s" -F "${1}" | grep best | grep mp4 | head -1 | awk '{print $1}') "${1}"
              echo ""
          }

          dl-mp3(){
              echo "running dl-mp3 \"${1}\" ..."
              /usr/local/bin/youtube-dl -o "$(uuidgen).%(ext)s" --extract-audio --audio-format mp3 "${1}"
              echo ""
          }

          dl-mp3-orig-name(){
              echo "running dl-mp3-orig-name \"${1}\" ..."
              /usr/local/bin/youtube-dl --extract-audio --audio-format mp3 "${1}"
              echo ""
          }

          youtube-dl-best-until(){
              until dl-best "${1}" &> /dev/null
              do
                  echo "running dl-best \"${1}\" ..."
                  sleep 1
              done
              echo -e "\nThe mp4 is downloaded."
          }



          youtube-dl-mp3-orig-name-until(){
              until dl-mp3-orig-name "${1}" &> /dev/null
              do
                  echo "running dl-mp3-orig-name \"${1}\" ..."
                  sleep $((1 + $RANDOM % 10))
              done
              echo -e "\nThe mp3 is downloaded."
          }



      - name: unixorn.zsh
        content: |
          # SOURCE: https://github.com/unixorn/zsh-quickstart-kit/blob/master/zsh/.zsh_aliases
          # aliases borrowed from unixorn
          alias historysummary="history | awk '{a[\$2]++} END{for(i in a){printf \"%5d\t%s\n\",a[i],i}}' | sort -rn | head"

          # A couple of different external IP lookups depending on which is down.
          alias external_ip="curl -s icanhazip.com"
          alias myip="dig +short myip.opendns.com @resolver1.opendns.com"

          # Show laptop's IP addresses
          alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"

          # SSH stuff
          # Pass our credentials by default
          alias sshA='ssh -A'
          alias ssh-A='ssh -A'
          alias ssh-unkeyed='/usr/bin/ssh'
          alias ssh_unkeyed='/usr/bin/ssh'

          alias scp-no-hostchecks='scp -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          alias ssh-no-hostchecks='ssh -A -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          alias scp_no_hostchecks='scp -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          alias ssh_no_hostchecks='ssh -A -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'

          # Set up even more shortcuts because I am that lazy a typist.
          alias nh-scp=scp-no-hostchecks
          alias nh-ssh=ssh-no-hostchecks
          alias nh_scp=scp-no-hostchecks
          alias nh_ssh=ssh-no-hostchecks
          alias nhscp=scp-no-hostchecks
          alias nhssh=ssh-no-hostchecks

          # Strip color codes from commands that insist on spewing them so we can
          # pipe them into files cleanly.
          alias stripcolors='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'

          # lists zombie processes
          zombie() {
            ps aux | awk '{if ($8=="Z") { print $2 }}'
          }
          alias zombies=zombie

    bossjones__oh__my__zsh__bin_files:
      - name: imagemagick_resize_square
        content: |
          #!/usr/bin/env bash
          _input=$(basename -- "${1}" | cut -d"." -f1)
          get_extension=$(basename -- $1 | cut -d"." -f2)
          _input_fname="${_input}.${get_extension}"
          _out_fname="${_input}_out.${get_extension}"
          _background="white.jpg"
          _overlay=${_input_fname}

          echo "_input = $_input"
          echo "get_extension = $get_extension"
          echo "_input_fname = $_input_fname"
          echo "_out_fname = $_out_fname"

          # https://legacy.imagemagick.org/Usage/compose/
          # https://legacy.imagemagick.org/Usage/compose/#over
          # Note that the order of the images is very important as you get very different results if the images, or the operator are swapped. This is especially the case with the "convert" command, which has the destination image before the source image.
          # The following commands are the two direct image 'composite' methods available in ImageMagick...

          # composite {overlay} {background} [{mask}] [-compose {method}]   {result}
          # convert  {background} {overlay} [{mask}] [-compose {method}] -composite   {result}

          # The "composite" command is the conventional method of compositing in IM. Having a dedicated command demonstrates just how important Image Composition is.

          # The "convert" operator "-composite" can also do Image Composition as part of a larger image processing task. Note the reversed order of the images when using "convert". The order is practical as you are generally working with a primary canvas over which you prepare and merge images forming a new image. The order of the images is important.

          # Practical examples of both techniques (and more) can be reviewed in Layers of Multiple Images, and is recomended reading before continuing.

          # convert -verbose "${_background}" "${_overlay}" -set colorspace RGB -resize 1080x1080 -gravity center -compose Copy_Black -interlace JPEG -composite "${_out_fname}"
          # convert -verbose "${_background}" "${_overlay}" -set colorspace RGB -resize 1080x1080 -gravity center -compose blend -define compose:args=100,100 -interlace JPEG -composite "${_out_fname}"
          # convert -verbose "${_background}" "${_overlay}" -set colorspace RGB -resize 1080x1080 -gravity center -compose Src -alpha set -interlace JPEG -composite "${_out_fname}"

          # convert -verbose "${_background}" "${_overlay}" -set colorspace RGB -resize 1080x1080 -gravity center -interlace JPEG -composite "${_out_fname}"


          # magick 151325673_1017500572117138_6338645722784183762_n.jpg -resize 1080x1080 -background white -compose Copy \
          # -gravity center -extent 1080x1080 -quality 92 output.jpg

          # -compose blend \
          # -define compose:args={src_percent},{dst_percent}

          magick "${_overlay}" -resize 1080x1080 -background white -compose Copy -gravity center -extent 1080x1080 -quality 92 "${_out_fname}"


    bossjones__oh__my__zsh__zshrc_local: |-
      export SHELL="{{bossjones__oh__my__zsh__path_to_shell}}"
      export RBENV_ROOT=~/.rbenv
      export RBENV_VERSION={{rbenv.default_ruby}}
      export VIRTUAL_ENV_DISABLE_PROMPT=1
      export ZSH_PYENV_LAZY_VIRTUALENV=1
      # Larger bash history (allow 32Â³ entries; default is 500)
      # OS X nvm load
      # [ -s "/usr/local/opt/nvm/nvm.sh" ] && . /usr/local/opt/nvm/nvm.sh # This loads nvm
      # export NVM_LAZY_LOAD=true
      # export NVM_AUTO_USE=true

      # set some history options
      setopt append_history
      setopt extended_history
      setopt hist_expire_dups_first
      setopt hist_ignore_all_dups
      setopt hist_ignore_dups
      setopt hist_ignore_space
      setopt hist_reduce_blanks
      setopt hist_save_no_dups
      setopt hist_verify
      setopt INC_APPEND_HISTORY
      unsetopt HIST_BEEP

      # Share your history across all your terminal windows
      setopt share_history
      #setopt noclobber

      # Larger bash history (allow 32Â³ entries; default is 500)

      HISTSIZE=100000
      SAVEHIST=100000
      HISTFILE="$HOME/.zsh_history"
      # export HISTCONTROL=ignoredups

      # # Prefer US English and use UTF-8
      # export LANG=en_US.UTF-8
      # export LC_ALL=en_US.UTF-8

      # # SOURCE: https://github.com/luismayta/dotfiles/blob/597ddc09e1bfccc43076ca21cb679299b83912e4/conf/shell/zshrc
      # # don't put duplicate lines in the history. See bash(1) for more options
      # # ... or force ignoredups and ignorespace
      # HISTCONTROL=ignoredups:ignorespace

      # # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
      # HISTSIZE=100000
      # HISTFILESIZE=2000

      alias reload!='exec "$SHELL" -l'

      fixprompt() {
        antigen reset; reload!
      }

      # setopt HIST_FIND_NO_DUPS

      # Add some completions settings
      setopt ALWAYS_TO_END     # Move cursor to the end of a completed word.
      setopt AUTO_LIST         # Automatically list choices on ambiguous completion.
      setopt AUTO_MENU         # Show completion menu on a successive tab press.
      setopt AUTO_PARAM_SLASH  # If completed parameter is a directory, add a trailing slash.
      setopt COMPLETE_IN_WORD  # Complete from both ends of a word.
      unsetopt MENU_COMPLETE   # Do not autoselect the first completion entry.

      # Long running processes should return time after they complete. Specified
      # in seconds.
      REPORTTIME=2
      TIMEFMT="%U user %S system %P cpu %*Es total"

      # # Speed up autocomplete, force prefix mapping
      # zstyle ':completion:*' accept-exact '*(N)'
      # zstyle ':completion:*' use-cache on
      # zstyle ':completion:*' cache-path ~/.zsh/cache
      # zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)*==34=34}:${(s.:.)LS_COLORS}")';


      if [ -n "$(which direnv)" ]; then
          eval "$(direnv hook zsh)"
      fi

      [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


      # remove dupes from $PATH using a zsh builtin
      # https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
      typeset -aU path;

      # # Load iTerm shell integrations if found.
      # test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

      # Expand aliases inline - see http://blog.patshead.com/2012/11/automatically-expaning-zsh-global-aliases---simplified.html
      globalias() {
        if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then
          zle _expand_alias
          zle expand-word
        fi
        zle self-insert
      }

      zle -N globalias

      bindkey " " globalias
      bindkey "^ " magic-space           # control-space to bypass completion
      bindkey -M isearch " " magic-space # normal space during searches


  roles:
    - ../ansible-role-oh-my-zsh

  pre_tasks:

    - name: ensure directories exist
      file:
        dest: "~/{{ item }}"
        state: directory
        mode: 0700
      loop:
        - .bin
        - bin
        - .local/bin
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"

    # SOURCE: https://github.com/veggiemonk/ansible-dotfiles/blob/master/tasks/fonts.yml
    - name: 'Cloning fonts | based on https://gist.github.com/ganapativs/e571d9287cb74121d41bfe75a0c864d7'
      git:
        repo=https://github.com/powerline/fonts
        dest="~/powerlinefonts"
        accept_hostkey=yes
        depth=1
      register: fontCloned
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    - name: 'Cloning iterm2-snazzy theme, dont forget to double click ~/iterm2-snazzy/Snazzy.itermcolors'
      git:
        repo=https://github.com/sindresorhus/iterm2-snazzy
        dest="~/iterm2-snazzy"
        accept_hostkey=yes
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    - name: Install Fonts
      shell: ~/powerlinefonts/install.sh chdir=~/powerlinefonts
      # when: fontCloned is success
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      when: (fontCloned is success) and not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    - name: 'brew tap homebrew/cask-fonts'
      homebrew_tap:
        name: homebrew/cask-fonts
        state: present
      # brew don't work from root user on macOS
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    - name: Install font-fira-code
      homebrew_cask:
        name: "{{ item }}"
        state: present
      with_items:
        - font-fira-code
      # brew don't work from root user on macOS
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    - name: Install/Setup asdf and direnv
      package:
        name: '{{ item }}'
        state: latest
      with_items:
        - direnv
        - asdf
        - peco
        - coreutils
        - findutils
        - gnu-tar
        - gnu-sed
        - gawk
        - gnutls
        - gnu-indent
        - gnu-getopt
        - grep
        - reattach-to-user-namespace
        - fpp
        - urlview
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      when: not (bossjones__oh__my__zsh__user == 'root' and ansible_os_family == 'Darwin')

    - name: Clone fzf
      git:
        repo: https://github.com/junegunn/fzf.git
        dest: "~/.fzf"
        version: "0.22.0"
        force: yes
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      register: bossjones__oh__my__zsh__register_fzf

    - name: Install fzf
      shell: ./install --all
      args:
        chdir: "~/.fzf"
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"

    - name: fzf-drafts | download
      shell: |
        curl -L 'https://raw.githubusercontent.com/jan-warchol/dotfiles/master/bin/fzf-drafts' > ~/bin/fzf-drafts;
        chmod +x ~/bin/fzf-drafts;
      args:
        executable: /bin/bash
      changed_when: false
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"


    - name: compaudit | figure out if anything to fix
      shell: |
        compaudit | wc -l
      args:
        executable: /usr/local/bin/zsh
      register: compaudit_word_count
      # changed_when: false
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      ignore_errors: yes
      changed_when: false
      failed_when: false

    - name: compaudit | fix
      shell: |
          compaudit | xargs chmod g-w,o-w
          compaudit | xargs chown "{{ bossjones__oh__my__zsh__user }}"
          rm ~/.zcompdump*
      args:
        executable: /usr/local/bin/zsh
      ignore_errors: yes
      changed_when: false
      failed_when: false
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      when: (compaudit_word_count|bool) and compaudit_word_count.stdout not "0"

    - name: ensure directories are owned correctly for zsh completion to work
      file:
        dest: "{{ item }}"
        state: directory
        owner: "{{ bossjones__oh__my__zsh__user }}"
        group: "{{ bossjones__oh__my__zsh__group }}"
        recurse: yes
      loop:
        - /usr/local/share/zsh/site-functions
        - /usr/local/share/zsh
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      when: ansible_facts['os_family'] == 'Darwin'

    - name: "ensure ~{{ bossjones__oh__my__zsh__user }}/bin/ exists"
      file:
        dest: "{{ item }}"
        state: directory
        owner: "{{ bossjones__oh__my__zsh__user }}"
        group: "{{ bossjones__oh__my__zsh__group }}"
        recurse: yes
      loop:
        - "~{{ bossjones__oh__my__zsh__user }}/bin/"
      become: yes
      become_user: "{{ bossjones__oh__my__zsh__user }}"
      when: ansible_facts['os_family'] == 'Darwin'

    - name: "create ~{{ bossjones__oh__my__zsh__user }}/bin/{{item.name}}"
      copy:
        content: "{{item.content}}"
        dest: "~{{ bossjones__oh__my__zsh__user }}/bin/{{item.name}}"
        owner: "{{ bossjones__oh__my__zsh__user }}"
        group: "{{ bossjones__oh__my__zsh__group }}"
        mode: 0755
      with_items: "{{bossjones__oh__my__zsh__bin_files}}"



